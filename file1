node { 
          
             def mvnHome = tool name: 'M2', type: 'maven'
             def mvnCMD = "${mvnHome}/bin/mvn"
             
         stage ('SCM Checkout') { 
          
         git credentialsId: '6e7b8671-a0b7-4e5e-a11c-75efae43fbc6', url: 'http://10.112.78.16/muthyalasudhakar.r/Pipeline_Task.git'

              }
       
        
        stage ('Maven clean package') {
               
           sh "${mvnCMD} clean package"
              }  
              
        stage ('sleep'){
          sleep 5   
          }
         
        stage('building image') {
           sh 'docker build -t jpetstore_task:${BUILD_NUMBER} .'
		
             }
             
        
        stage ('images list') {
             sh 'docker images '
              }  
              
        
		        
		stage (' taging the docker image '){
		 
		 withCredentials([string(credentialsId: 'DockerRegistryServer', variable: 'DockerRegistryServer')]) {         
		        
		      sh " docker  tag jpetstore_task:${BUILD_NUMBER} ${DockerRegistryServer}/jpetstore_task:${BUILD_NUMBER} "
		         
		        
		        }
		        }
		        
		        
              
        /*stage ('docker login'){
                       withCredentials([string(credentialsId: 'DockerRegistryServer', variable: 'DockerRegistryServer')]) {
                       sh " docker login -u admin -p admin123 ${DockerRegistryServer} "
                        }
                        }*/
        stage ('docker login'){
                       withCredentials([string(credentialsId: 'DockerRegistryServer', variable: 'DockerRegistryServer'), usernamePassword(credentialsId: '39361287-06fc-4ebc-8730-ce3e0a795e5b', passwordVariable: 'passwd', usernameVariable: 'user')]) {
                       sh " docker login -u $user -p $passwd ${DockerRegistryServer} "
                                }
                                }                
                   
                   
        stage ('docker push'){           
            
            withCredentials([string(credentialsId: 'DockerRegistryServer', variable: 'DockerRegistryServer')]) {  
             sh " docker push ${DockerRegistryServer}/jpetstore_task:${BUILD_NUMBER} "
           
			 
			 }
			 }
			 
		stage ('images list') {
                  sh 'docker images '
                    }  
			 
			 
		stage ('docker images removing'){
		     withCredentials([string(credentialsId: 'DockerRegistryServer', variable: 'DockerRegistryServer')]) {  
             sh " docker rmi jpetstore_task:${BUILD_NUMBER} ${DockerRegistryServer}/jpetstore_task:${BUILD_NUMBER} "
               }  
               }			   
           
   

        stage('SonarQube analysis') {
           
           sonarRunner = tool 'SonarRunner'
           sh '/var/lib/jenkins/tools/hudson.plugins.sonar.SonarRunnerInstallation/sonar/bin/sonar-runner ' +
            '-Dsonar.login=8fb8b15e6e5cfd341a8e56cf323ded5831193373 ' +
            '-Dsonar.host.url=http://10.106.131.81:59000 ' +
            '-Dsonar.projectName=$JOB_NAME ' +
            '-Dsonar.projectVersion=1.0 ' +
            '-Dsonar.projectKey=$JOB_NAME ' +
            '-Dsonar.sources=/var/lib/jenkins/workspace/Jenkins_filejob '
                 }
        
        stage('Post') {
	       junit 'target/surefire-reports/*.xml'
                }
                
        stage ('sleep'){
            sleep 5   
             }
          
        stage ('Artifactory upload to Nexus_Repo'){
            
            nexusArtifactUploader artifacts: [[artifactId: 'jpetstore', classifier: '', file: 'target/jpetstore.war', type: 'war']], credentialsId: 'eba9634d-d28c-4ca5-bcab-e68be470c3d2', groupId: 'MSR1', nexusUrl: '10.106.131.81:58081/nexus', nexusVersion: 'nexus2', protocol: 'http', repository: 'nexus_pipeline', version: '1.0'

                } 
        
      
        stage ('deploy war file in tomcat server') {
            withCredentials([string(credentialsId: 'Tomcat15_PW', variable: 'Tomcat15_PW')]) {

			sh "sshpass -p ${Tomcat15_PW} scp target/jpetstore.war root@10.106.131.85:/app/apache-tomcat-9.0.8/webapps "
		        }
		        }
		        
		stage ('sleep'){
            sleep 5   
            }        
		        
		stage ('Web application Validation'){
		
		sh 'curl -I --trace-ascii curl.trace http://10.106.131.85:8282/jpetstore/ '
		
		}
 
 }
